<!--
***********************************************************************************************
Directory.Packages.props

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright (c) 74Bravo LLC and Contributors. All rights reserved.. All rights reserved.
***********************************************************************************************
-->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <LocalPackageFeed>C:\DebugPackages</LocalPackageFeed>
  </PropertyGroup>
  <PropertyGroup Label="Nuget Packaging Properties">
    <Authors>ACLIF, OpenStrata, 74Bravo</Authors>
    <Copyright>Copyright (c) 74Bravo LLC and Contributors. All rights reserved.</Copyright>
    <Company>74 Bravo, LLC.</Company>
    <Product>Another Command Line Interface Framework (ACLIF)</Product>
    <!--<PackageLicenseFile>LICENSE.txt</PackageLicenseFile>-->
    <PackageLicenseExpression>APSL-2.0</PackageLicenseExpression>
    <PackageIcon>aclif.png</PackageIcon>
    <PackageIconUrl />
    <!--<PackageVersion>$(Version)-Beta</PackageVersion>-->
    <PackageReleaseNotesPath>releaseNotes.txt</PackageReleaseNotesPath>
    <PackageDescriptionPath>description.txt</PackageDescriptionPath>
    <PackageSummaryPath>summary.txt</PackageSummaryPath>
    <PackageReadmePath>readme.md</PackageReadmePath>
    <PackageReadmeFile Condition="Exists('$(PackageReadmePath)')">docs\readme.md</PackageReadmeFile>
    <PackageTags>aclif;cli;command line interface;devops;$(PackageTags)</PackageTags>
    <Version>1.0.2-Preview</Version>
  </PropertyGroup>
  <ItemGroup>
    <None Include="$(MSBuildThisFileDirectory)\aclif.png" Condition="Exists('$(MSBuildThisFileDirectory)\aclif.png')">
      <Pack>true</Pack>
      <PackagePath>\</PackagePath>
    </None>
    <None Include="$(MSBuildThisFileDirectory)\LICENSE.txt" Condition="Exists('$(MSBuildThisFileDirectory)\LICENSE.txt')">
      <Pack>true</Pack>
      <PackagePath>\</PackagePath>
    </None>
    <None Include="$(PackageDescriptionPath)" Condition="Exists('$(PackageDescriptionPath)')">
      <Pack>false</Pack>
    </None>
    <None Include="$(PackageReleaseNotesPath)" Condition="Exists('$(PackageReleaseNotesPath)')">
      <Pack>false</Pack>
    </None>
    <None Include="$(PackageSummaryPath)" Condition="Exists('$(PackageSummaryPath)')">
      <Pack>false</Pack>
    </None>
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.Build.Utilities.Core" Version="16.11.0">
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="GitInfo" Version="2.2.0">
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="System.ComponentModel.Composition" Version="4.5.0">
      <PrivateAssets>none</PrivateAssets>
    </PackageReference>
    <PackageReference Include="System.Linq" Version="4.3.0">
      <PrivateAssets>none</PrivateAssets>
    </PackageReference>
  </ItemGroup>
  <ItemGroup>
  </ItemGroup>
  <ItemGroup>
    <PackageVersion Include="aclif.core">
      <Version>1.0.2-Preview</Version>
    </PackageVersion>
  </ItemGroup>
  <PropertyGroup>
    <!--Setting AfterMicrosoftNETSdkTargets to trigger the importing of Directory.Packages.targets when appropriate.-->
    <AfterMicrosoftNETSdkTargets>
			$(AfterMicrosoftNETSdkTargets);
			$(MSBuildThisFileDirectory)Directory.Packages.targets;
		</AfterMicrosoftNETSdkTargets>
  </PropertyGroup>
  <!--Workaround for including project -to -project reference output.-->
  <PropertyGroup>
    <!--Setting AfterMicrosoftNETSdkTargets to trigger the importing of Directory.Packages.targets when appropriate.-->
    <Project2ProjectBuildOutputWorkAroundDependsOn>
			BuiltProjectOutputGroup;
			DocumentationProjectOutputGroup;
			SatelliteDllsProjectOutputGroup;
			_AddPriFileToPackBuildOutput;
			$(TargetsForTfmSpecificBuildOutput);
			$(Project2ProjectBuildOutputWorkAroundDependsOn)
		</Project2ProjectBuildOutputWorkAroundDependsOn>
    <TargetsForTfmSpecificBuildOutput>
			_Project2ProjectBuildOutputWorkAround;
			$(TargetsForTfmSpecificBuildOutput);
		</TargetsForTfmSpecificBuildOutput>
  </PropertyGroup>
  <Target Name="_Project2ProjectBuildOutputWorkAround" DependsOnTargets="ResolveAssemblyReferences;$(Project2ProjectBuildOutputWorkAroundDependsOn)" Returns="@(BuiltProjectOutputGroupOutput)">
    <Message Text="--Project2Project" />
    <Message Text="@(BuiltProjectOutputGroupOutput)" />
    <ItemGroup>
      <!-- IncludeRuntimeDependency=true metadata is escape hatch to include a non-copy local reference in deps file as a runtime dependency -->
      <!--
			<ReferencePath>
				<IncludeRuntimeDependency Condition="'%(ReferencePath.IncludeRuntimeDependency)' == '' and '%(ReferencePath.CopyLocal)' == 'true'">true</IncludeRuntimeDependency>
			</ReferencePath>

			<ReferenceDependencyPaths>
				<IncludeRuntimeDependency Condition="'%(ReferenceDependencyPaths.IncludeRuntimeDependency)' == '' and '%(ReferenceDependencyPaths.CopyLocal)' == 'true'">true</IncludeRuntimeDependency>
			</ReferenceDependencyPaths>-->
      <BuiltProjectOutputGroupOutput Include="@(ReferenceCopyLocalPaths)" />
      <!--<Project2ProjectBuildOutputs Include="@(ReferenceDependencyPaths->WithMetadataValue('IncludeRuntimeDependency', 'true'))" />-->
    </ItemGroup>
  </Target>
  <!--<Target Name="_GetBuildOutputFilesWithTfm"
		DependsOnTargets="BuiltProjectOutputGroup;DocumentationProjectOutputGroup;SatelliteDllsProjectOutputGroup;_AddPriFileToPackBuildOutput;$(TargetsForTfmSpecificBuildOutput)"
		Returns="@(BuildOutputInPackage)">
		<ItemGroup Condition="'$(IncludeBuildOutput)' == 'true'">
			<BuildOutputInPackage Include="@(SatelliteDllsProjectOutputGroupOutput);
                            @(BuiltProjectOutputGroupOutput);
                            @(DocumentationProjectOutputGroupOutput);
                            @(_PathToPriFile)"/>
		</ItemGroup>
	</Target>-->
  <!--<Target Name="GenerateNuspec"
		Condition="'$(IsPackable)' == 'true'"
		Inputs="@(NuGetPackInput)" Outputs="@(NuGetPackOutput)"
		DependsOnTargets="$(GenerateNuspecDependsOn)"-->
</Project>